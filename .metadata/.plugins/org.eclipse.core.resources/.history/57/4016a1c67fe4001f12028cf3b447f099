package com.foodie.foodiebackend.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
@EnableWebSecurity
public class SecurityConfig {

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http.csrf().disable()
            .cors().and()  // Ensure CORS is enabled
            .authorizeHttpRequests(auth -> auth
                .requestMatchers("/api/auth/**").permitAll()  // Public endpoints for login & registration
                .requestMatchers("/api/admin/**").hasRole("ADMIN")  // Admin-only access
                .anyRequest().authenticated() // All other requests require authentication
            )
            .formLogin()  // Use form-based login instead of basic auth
            .loginPage("/login")  // Custom login route
            .permitAll()
            .and()
            .logout()
            .permitAll()
            .and()
            .httpBasic().disable();  // âœ… Disable HTTP Basic Auth to remove browser pop-up

        return http.build();
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
}
